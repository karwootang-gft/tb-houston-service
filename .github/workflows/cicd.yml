# This workflow will install Python dependencies, run tests and lint with a single version of Python.
# Creation static html documentation file and add to the PR.
#
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Houston Service - CICD Workflow

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    ### Continuous Integration
    runs-on: ubuntu-latest
    steps:
    - name: Extract current branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Echo Branch Name
      shell: bash
      run: |
        echo Branch name: ${{ steps.extract_branch.outputs.branch }}      
    - uses: actions/checkout@v2
      with:
        repository: tranquilitybase-io/tb-houston-service
        path: .
        fetch-depth: 0
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${GITHUB_WORKSPACE}/tests/requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server:  https://gcr.io
        username: '_json_key'
        password: ${{ secrets.GCP_SA_KEY }}

    - name: Build Houston MYSQL57 Image
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}/tb-houston-service/sql
        docker build -t gcr.io/eagle-console-resources/tb-houston-mysql57:ci .
        docker push gcr.io/eagle-console-resources/tb-houston-mysql57:ci

    - name: Build Houston Service Image
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}/tb-houston-service
        docker build -t gcr.io/eagle-console-resources/tb-houston-service:ci .
        docker push gcr.io/eagle-console-resources/tb-houston-service:ci

    - name: Start Docker Compose
      shell: bash
      run: |
        docker-compose -f docker_compose_cicd.yml up > docker_compose_cicd.log 2>&1 &

    - name: Give Services time to initialize (abort if elapsed time is greater than 10 minutes)
      shell: bash
      run: |
        start_epoch="$(date -u +%s)"
        elapsed_seconds=0
        until [ $(docker-compose -f docker_compose_cicd.yml ps | grep Up | wc -l) -eq 3 ] || [ $elapsed_seconds -ge 600 ]
        do
          sleep 30
          docker-compose -f docker_compose_cicd.yml ps
          current_epoch="$(date -u +%s)"
          elapsed_seconds="$(($current_epoch-$start_epoch))"
          echo "Elapsed seconds: ${elapsed_seconds}"
        done

    # Be careful, if services aren't given sufficient time to initialize the tests will fail.
    - name: Test with pytest
      run: |
        cd ${GITHUB_WORKSPACE}/tb-houston-service
        pip install pytest
        HOUSTON_SERVICE_URL="localhost:3000" pytest --rootdir tests

    - name: Stop Docker Compose
      shell: bash
      run: |
        docker-compose -f docker_compose_cicd.yml down 

    ### Continuous Deployment
    - name: run semver, store in step variable version
      shell: bash
      run: |
        echo "##[set-output name=version;]$(python ${GITHUB_WORKSPACE}/TranquilityBase/scripts/semver.py ${{ steps.extract_branch.outputs.branch }})"
      id: get_version
    - name: check if version variable is set
      shell: bash
      run: |
        if [[ -z ${{ steps.get_version.outputs.version }} ]]; then
          echo "Error: version in environment is not set." 1>&2
          exit 1
        fi
        cat version.json
    - name: git add, commit and push
      shell: bash
      run: |
        git config user.email git.action@gft.com
        git config user.name "git.action"
        git add version.json
        git commit -m "Add version.json"
        git tag -a "internal-v${{ steps.get_version.outputs.version }}" -m "semver tagging ${{ steps.get_version_outputs.version }}"
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        branch: ${{ steps.extract_branch.outputs.branch }}
        force: true
        github_token: ${{ secrets.GITHUB_TOKEN }}                      
    - name: Tag Images
      run: |
        docker tag gcr.io/eagle-console-resources/tb-houston-mysql57:ci "gcr.io/eagle-console-resources/tb-houston-service:internal-v${{ steps.get_version.outputs.version }}"
        docker push "gcr.io/eagle-console-resources/tb-houston-mysql57:internal-v${{ steps.get_version.outputs.version }}"
        docker tag gcr.io/eagle-console-resources/tb-houston-service:ci "gcr.io/eagle-console-resources/tb-houston-service:internal-v${{ steps.get_version.outputs.version }}"
        docker push "gcr.io/eagle-console-resources/tb-houston-service:internal-v${{ steps.get_version.outputs.version }}"
